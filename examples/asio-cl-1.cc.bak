/***********************************************
*
*Filename: asio-cl-1.cc
*
*@author: Xianghang Mi
*@email: mixianghang@outlook.com
*@description: ---
*Create: 2015-09-28 13:57:09
*Last Modified: 2015-09-28 13:57:09
************************************************/

#include "asio-cl.h"

int main(int argc, char *argv[]) {
  try {
    if (argc < 6) {
      std::cerr << "Usage: asio-cl URI get1 get2 logfile1 logfile2" << std::endl;
      return 1;
    }
    boost::system::error_code ec;
    boost::asio::io_service io_service;

	timeinfo get1Info, get2Info;
	sprintf(get1Info.output, "%s", argv[2]); 
	sprintf(get2Info.output, "%s", argv[3]); 
	sprintf(get1Info.logFile, "%s",argv[4]);
	sprintf(get2Info.logFile, "%s",argv[5]);
    std::string uri = argv[1];
	std::string get1 = uri + "/" + argv[2];
	std::string get2 = uri + "/" + argv[3];
    std::string scheme, host, service;

    if (host_service_from_uri(ec, scheme, host, service, uri)) {
      std::cerr << "error: bad URI: " << ec.message() << std::endl;
      return 1;
    }

    boost::asio::ssl::context tls_ctx(boost::asio::ssl::context::sslv23);
    tls_ctx.set_default_verify_paths();
    // disabled to make development easier...
    // tls_ctx.set_verify_mode(boost::asio::ssl::verify_peer);
    configure_tls_context(ec, tls_ctx);

	session_manager sessionManager{};
    auto sessId = scheme == "https" ? sessionManager.startNewSession(io_service, tls_ctx, host, service)
                                  : sessionManager.startNewSession(io_service, host, service);
								  

	if (sessId < 0) {
	  std::cerr << "error: create new session error" << std::endl;
	  return 1;
	}

	auto sess = sessionManager.getSession(sessId);
	gettimeofday(&(get1Info.connectStart), NULL);
	gettimeofday(&(get2Info.connectStart), NULL);
	initSession(sess, sessId,  uri, get1, get2, get1Info, get2Info);
    io_service.run();
  } catch (std::exception &e) {
    std::cerr << "exception: " << e.what() << "\n";
  }

  return 0;
}

